// @author: Annika Lichtenstein <annika.lichtenstein@i22.de>
// @desc: mixin to add media queries
// @param from: bool or string
// @param until: string (optional)

@mixin mq($from, $until: false) {
  @if $from==false {
    @media screen and (max-width: #{$until}) {
      @content;
    }
  }

  @else if $until !=false {
    @media screen and (min-width: #{$from}) and (max-width: #{$until}) {
      @content;
    }
  }

  @else {
    @media screen and (min-width: #{$from}) {
      @content;
    }
  }
}

// ---------------------------- //

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (s: 0, m: 640px, l: 1024px, xl: 1500px)
//
// The map defined in the `$mq-breakpoints` global variable is used as the `$breakpoints` argument by default.


// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (s: 0, m: 640px, l: 1024px, xl: 1500px))
//    576px
@function breakpoint-min($name, $breakpoints: $mq-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min !=0, $min, null);
}


// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (s: 0, m: 640px, l: 1024px, xl: 1500px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (s: 0, m: 640px, l: 1024px, xl: 1500px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $mq-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints)==null, "", "--#{$name}");
}
