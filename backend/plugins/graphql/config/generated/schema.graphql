type Blogarticle {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  headline: String
  publishDate: DateTime
  blogImage: UploadFile
  description: String
  blogContent: String
}

type BlogarticleAggregator {
  count: Int
}

type BlogarticleConnection {
  values: [Blogarticle]
  groupBy: BlogarticleGroupBy
  aggregate: BlogarticleAggregator
}

type BlogarticleConnection_id {
  key: ID
  connection: BlogarticleConnection
}

type BlogarticleConnectionBlogContent {
  key: String
  connection: BlogarticleConnection
}

type BlogarticleConnectionBlogImage {
  key: ID
  connection: BlogarticleConnection
}

type BlogarticleConnectionCreatedAt {
  key: DateTime
  connection: BlogarticleConnection
}

type BlogarticleConnectionDescription {
  key: String
  connection: BlogarticleConnection
}

type BlogarticleConnectionHeadline {
  key: String
  connection: BlogarticleConnection
}

type BlogarticleConnectionPublishDate {
  key: DateTime
  connection: BlogarticleConnection
}

type BlogarticleConnectionUpdatedAt {
  key: DateTime
  connection: BlogarticleConnection
}

type BlogarticleGroupBy {
  _id: [BlogarticleConnection_id]
  createdAt: [BlogarticleConnectionCreatedAt]
  updatedAt: [BlogarticleConnectionUpdatedAt]
  headline: [BlogarticleConnectionHeadline]
  publishDate: [BlogarticleConnectionPublishDate]
  blogImage: [BlogarticleConnectionBlogImage]
  description: [BlogarticleConnectionDescription]
  blogContent: [BlogarticleConnectionBlogContent]
}

input BlogarticleInput {
  headline: String
  publishDate: DateTime
  blogImage: ID
  description: String
  blogContent: String
}

type Childmenulink {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  label: String
  url: String
  title: String
  menulink: Menulink
}

type ChildmenulinkAggregator {
  count: Int
}

type ChildmenulinkConnection {
  values: [Childmenulink]
  groupBy: ChildmenulinkGroupBy
  aggregate: ChildmenulinkAggregator
}

type ChildmenulinkConnection_id {
  key: ID
  connection: ChildmenulinkConnection
}

type ChildmenulinkConnectionCreatedAt {
  key: DateTime
  connection: ChildmenulinkConnection
}

type ChildmenulinkConnectionLabel {
  key: String
  connection: ChildmenulinkConnection
}

type ChildmenulinkConnectionMenulink {
  key: ID
  connection: ChildmenulinkConnection
}

type ChildmenulinkConnectionTitle {
  key: String
  connection: ChildmenulinkConnection
}

type ChildmenulinkConnectionUpdatedAt {
  key: DateTime
  connection: ChildmenulinkConnection
}

type ChildmenulinkConnectionUrl {
  key: String
  connection: ChildmenulinkConnection
}

type ChildmenulinkGroupBy {
  _id: [ChildmenulinkConnection_id]
  createdAt: [ChildmenulinkConnectionCreatedAt]
  updatedAt: [ChildmenulinkConnectionUpdatedAt]
  label: [ChildmenulinkConnectionLabel]
  url: [ChildmenulinkConnectionUrl]
  title: [ChildmenulinkConnectionTitle]
  menulink: [ChildmenulinkConnectionMenulink]
}

input ChildmenulinkInput {
  label: String
  url: String
  title: String
  menulink: ID
}

input createBlogarticleInput {
  data: BlogarticleInput
}

type createBlogarticlePayload {
  blogarticle: Blogarticle
}

input createChildmenulinkInput {
  data: ChildmenulinkInput
}

type createChildmenulinkPayload {
  childmenulink: Childmenulink
}

input createGalleryimageInput {
  data: GalleryimageInput
}

type createGalleryimagePayload {
  galleryimage: Galleryimage
}

input createGalleryInput {
  data: GalleryInput
}

type createGalleryPayload {
  gallery: Gallery
}

input createMenulinkInput {
  data: MenulinkInput
}

type createMenulinkPayload {
  menulink: Menulink
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Page
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTestimonialInput {
  data: TestimonialInput
}

type createTestimonialPayload {
  testimonial: Testimonial
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteBlogarticleInput {
  where: InputID
}

type deleteBlogarticlePayload {
  blogarticle: Blogarticle
}

input deleteChildmenulinkInput {
  where: InputID
}

type deleteChildmenulinkPayload {
  childmenulink: Childmenulink
}

input deleteGalleryimageInput {
  where: InputID
}

type deleteGalleryimagePayload {
  galleryimage: Galleryimage
}

input deleteGalleryInput {
  where: InputID
}

type deleteGalleryPayload {
  gallery: Gallery
}

input deleteMenulinkInput {
  where: InputID
}

type deleteMenulinkPayload {
  menulink: Menulink
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Page
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTestimonialInput {
  where: InputID
}

type deleteTestimonialPayload {
  testimonial: Testimonial
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editBlogarticleInput {
  headline: String
  publishDate: DateTime
  blogImage: ID
  description: String
  blogContent: String
}

input editChildmenulinkInput {
  label: String
  url: String
  title: String
  menulink: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editGalleryimageInput {
  image: ID
  altText: String
  imageDescription: String
  gallery: [ID]
}

input editGalleryInput {
  galleryimages: [ID]
  galleryName: String
}

input editMenulinkInput {
  label: String
  url: String
  title: String
  childmenulinks: [ID]
}

input editPageInput {
  Title: String
  MetaDescription: String
  StageImage: ID
  StageImageAltText: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTestimonialInput {
  image: ID
  name: String
  position: String
  testemonial: String
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Gallery {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  galleryName: String
  galleryimages(sort: String, limit: Int, start: Int, where: JSON): [Galleryimage]
}

type GalleryAggregator {
  count: Int
}

type GalleryConnection {
  values: [Gallery]
  groupBy: GalleryGroupBy
  aggregate: GalleryAggregator
}

type GalleryConnection_id {
  key: ID
  connection: GalleryConnection
}

type GalleryConnectionCreatedAt {
  key: DateTime
  connection: GalleryConnection
}

type GalleryConnectionGalleryName {
  key: String
  connection: GalleryConnection
}

type GalleryConnectionUpdatedAt {
  key: DateTime
  connection: GalleryConnection
}

type GalleryGroupBy {
  _id: [GalleryConnection_id]
  createdAt: [GalleryConnectionCreatedAt]
  updatedAt: [GalleryConnectionUpdatedAt]
  galleryName: [GalleryConnectionGalleryName]
}

type Galleryimage {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  image: UploadFile
  altText: String
  imageDescription: String
  gallery(sort: String, limit: Int, start: Int, where: JSON): [Gallery]
}

type GalleryimageAggregator {
  count: Int
}

type GalleryimageConnection {
  values: [Galleryimage]
  groupBy: GalleryimageGroupBy
  aggregate: GalleryimageAggregator
}

type GalleryimageConnection_id {
  key: ID
  connection: GalleryimageConnection
}

type GalleryimageConnectionAltText {
  key: String
  connection: GalleryimageConnection
}

type GalleryimageConnectionCreatedAt {
  key: DateTime
  connection: GalleryimageConnection
}

type GalleryimageConnectionImage {
  key: ID
  connection: GalleryimageConnection
}

type GalleryimageConnectionImageDescription {
  key: String
  connection: GalleryimageConnection
}

type GalleryimageConnectionUpdatedAt {
  key: DateTime
  connection: GalleryimageConnection
}

type GalleryimageGroupBy {
  _id: [GalleryimageConnection_id]
  createdAt: [GalleryimageConnectionCreatedAt]
  updatedAt: [GalleryimageConnectionUpdatedAt]
  image: [GalleryimageConnectionImage]
  altText: [GalleryimageConnectionAltText]
  imageDescription: [GalleryimageConnectionImageDescription]
}

input GalleryimageInput {
  image: ID
  altText: String
  imageDescription: String
  gallery: [ID]
}

input GalleryInput {
  galleryimages: [ID]
  galleryName: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Menulink {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  label: String
  url: String
  title: String
  childmenulinks(sort: String, limit: Int, start: Int, where: JSON): [Childmenulink]
}

type MenulinkAggregator {
  count: Int
}

type MenulinkConnection {
  values: [Menulink]
  groupBy: MenulinkGroupBy
  aggregate: MenulinkAggregator
}

type MenulinkConnection_id {
  key: ID
  connection: MenulinkConnection
}

type MenulinkConnectionCreatedAt {
  key: DateTime
  connection: MenulinkConnection
}

type MenulinkConnectionLabel {
  key: String
  connection: MenulinkConnection
}

type MenulinkConnectionTitle {
  key: String
  connection: MenulinkConnection
}

type MenulinkConnectionUpdatedAt {
  key: DateTime
  connection: MenulinkConnection
}

type MenulinkConnectionUrl {
  key: String
  connection: MenulinkConnection
}

type MenulinkGroupBy {
  _id: [MenulinkConnection_id]
  createdAt: [MenulinkConnectionCreatedAt]
  updatedAt: [MenulinkConnectionUpdatedAt]
  label: [MenulinkConnectionLabel]
  url: [MenulinkConnectionUrl]
  title: [MenulinkConnectionTitle]
}

input MenulinkInput {
  label: String
  url: String
  title: String
  childmenulinks: [ID]
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Blogarticle | createBlogarticlePayload | updateBlogarticlePayload | deleteBlogarticlePayload | BlogarticleConnection | BlogarticleAggregator | BlogarticleGroupBy | BlogarticleConnection_id | BlogarticleConnectionCreatedAt | BlogarticleConnectionUpdatedAt | BlogarticleConnectionHeadline | BlogarticleConnectionPublishDate | BlogarticleConnectionBlogImage | BlogarticleConnectionDescription | BlogarticleConnectionBlogContent | Childmenulink | createChildmenulinkPayload | updateChildmenulinkPayload | deleteChildmenulinkPayload | ChildmenulinkConnection | ChildmenulinkAggregator | ChildmenulinkGroupBy | ChildmenulinkConnection_id | ChildmenulinkConnectionCreatedAt | ChildmenulinkConnectionUpdatedAt | ChildmenulinkConnectionLabel | ChildmenulinkConnectionUrl | ChildmenulinkConnectionTitle | ChildmenulinkConnectionMenulink | Gallery | createGalleryPayload | updateGalleryPayload | deleteGalleryPayload | GalleryConnection | GalleryAggregator | GalleryGroupBy | GalleryConnection_id | GalleryConnectionCreatedAt | GalleryConnectionUpdatedAt | GalleryConnectionGalleryName | Galleryimage | createGalleryimagePayload | updateGalleryimagePayload | deleteGalleryimagePayload | GalleryimageConnection | GalleryimageAggregator | GalleryimageGroupBy | GalleryimageConnection_id | GalleryimageConnectionCreatedAt | GalleryimageConnectionUpdatedAt | GalleryimageConnectionImage | GalleryimageConnectionAltText | GalleryimageConnectionImageDescription | Menulink | createMenulinkPayload | updateMenulinkPayload | deleteMenulinkPayload | MenulinkConnection | MenulinkAggregator | MenulinkGroupBy | MenulinkConnection_id | MenulinkConnectionCreatedAt | MenulinkConnectionUpdatedAt | MenulinkConnectionLabel | MenulinkConnectionUrl | MenulinkConnectionTitle | Page | createPagePayload | updatePagePayload | deletePagePayload | PageConnection | PageAggregator | PageGroupBy | PageConnection_id | PageConnectionCreatedAt | PageConnectionUpdatedAt | PageConnectionTitle | PageConnectionMetaDescription | PageConnectionStageImage | PageConnectionStageImageAltText | Testimonial | createTestimonialPayload | updateTestimonialPayload | deleteTestimonialPayload | TestimonialConnection | TestimonialAggregator | TestimonialGroupBy | TestimonialConnection_id | TestimonialConnectionCreatedAt | TestimonialConnectionUpdatedAt | TestimonialConnectionImage | TestimonialConnectionName | TestimonialConnectionPosition | TestimonialConnectionTestemonial | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createBlogarticle(input: createBlogarticleInput): createBlogarticlePayload
  updateBlogarticle(input: updateBlogarticleInput): updateBlogarticlePayload
  deleteBlogarticle(input: deleteBlogarticleInput): deleteBlogarticlePayload
  createChildmenulink(input: createChildmenulinkInput): createChildmenulinkPayload
  updateChildmenulink(input: updateChildmenulinkInput): updateChildmenulinkPayload
  deleteChildmenulink(input: deleteChildmenulinkInput): deleteChildmenulinkPayload
  createGallery(input: createGalleryInput): createGalleryPayload
  updateGallery(input: updateGalleryInput): updateGalleryPayload
  deleteGallery(input: deleteGalleryInput): deleteGalleryPayload
  createGalleryimage(input: createGalleryimageInput): createGalleryimagePayload
  updateGalleryimage(input: updateGalleryimageInput): updateGalleryimagePayload
  deleteGalleryimage(input: deleteGalleryimageInput): deleteGalleryimagePayload
  createMenulink(input: createMenulinkInput): createMenulinkPayload
  updateMenulink(input: updateMenulinkInput): updateMenulinkPayload
  deleteMenulink(input: deleteMenulinkInput): deleteMenulinkPayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload
  createTestimonial(input: createTestimonialInput): createTestimonialPayload
  updateTestimonial(input: updateTestimonialInput): updateTestimonialPayload
  deleteTestimonial(input: deleteTestimonialInput): deleteTestimonialPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Page {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Title: String
  MetaDescription: String
  StageImage: UploadFile
  StageImageAltText: String
}

type PageAggregator {
  count: Int
}

type PageConnection {
  values: [Page]
  groupBy: PageGroupBy
  aggregate: PageAggregator
}

type PageConnection_id {
  key: ID
  connection: PageConnection
}

type PageConnectionCreatedAt {
  key: DateTime
  connection: PageConnection
}

type PageConnectionMetaDescription {
  key: String
  connection: PageConnection
}

type PageConnectionStageImage {
  key: ID
  connection: PageConnection
}

type PageConnectionStageImageAltText {
  key: String
  connection: PageConnection
}

type PageConnectionTitle {
  key: String
  connection: PageConnection
}

type PageConnectionUpdatedAt {
  key: DateTime
  connection: PageConnection
}

type PageGroupBy {
  _id: [PageConnection_id]
  createdAt: [PageConnectionCreatedAt]
  updatedAt: [PageConnectionUpdatedAt]
  Title: [PageConnectionTitle]
  MetaDescription: [PageConnectionMetaDescription]
  StageImage: [PageConnectionStageImage]
  StageImageAltText: [PageConnectionStageImageAltText]
}

input PageInput {
  Title: String
  MetaDescription: String
  StageImage: ID
  StageImageAltText: String
}

type Query {
  blogarticle(id: ID!): Blogarticle
  blogarticles(sort: String, limit: Int, start: Int, where: JSON): [Blogarticle]
  blogarticlesConnection(sort: String, limit: Int, start: Int, where: JSON): BlogarticleConnection
  childmenulink(id: ID!): Childmenulink
  childmenulinks(sort: String, limit: Int, start: Int, where: JSON): [Childmenulink]
  childmenulinksConnection(sort: String, limit: Int, start: Int, where: JSON): ChildmenulinkConnection
  gallery(id: ID!): Gallery
  galleries(sort: String, limit: Int, start: Int, where: JSON): [Gallery]
  galleriesConnection(sort: String, limit: Int, start: Int, where: JSON): GalleryConnection
  galleryimage(id: ID!): Galleryimage
  galleryimages(sort: String, limit: Int, start: Int, where: JSON): [Galleryimage]
  galleryimagesConnection(sort: String, limit: Int, start: Int, where: JSON): GalleryimageConnection
  menulink(id: ID!): Menulink
  menulinks(sort: String, limit: Int, start: Int, where: JSON): [Menulink]
  menulinksConnection(sort: String, limit: Int, start: Int, where: JSON): MenulinkConnection
  page(id: ID!): Page
  pages(sort: String, limit: Int, start: Int, where: JSON): [Page]
  pagesConnection(sort: String, limit: Int, start: Int, where: JSON): PageConnection
  testimonial(id: ID!): Testimonial
  testimonials(sort: String, limit: Int, start: Int, where: JSON): [Testimonial]
  testimonialsConnection(sort: String, limit: Int, start: Int, where: JSON): TestimonialConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Testimonial {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  image: UploadFile
  name: String
  position: String
  testemonial: String
}

type TestimonialAggregator {
  count: Int
}

type TestimonialConnection {
  values: [Testimonial]
  groupBy: TestimonialGroupBy
  aggregate: TestimonialAggregator
}

type TestimonialConnection_id {
  key: ID
  connection: TestimonialConnection
}

type TestimonialConnectionCreatedAt {
  key: DateTime
  connection: TestimonialConnection
}

type TestimonialConnectionImage {
  key: ID
  connection: TestimonialConnection
}

type TestimonialConnectionName {
  key: String
  connection: TestimonialConnection
}

type TestimonialConnectionPosition {
  key: String
  connection: TestimonialConnection
}

type TestimonialConnectionTestemonial {
  key: String
  connection: TestimonialConnection
}

type TestimonialConnectionUpdatedAt {
  key: DateTime
  connection: TestimonialConnection
}

type TestimonialGroupBy {
  _id: [TestimonialConnection_id]
  createdAt: [TestimonialConnectionCreatedAt]
  updatedAt: [TestimonialConnectionUpdatedAt]
  image: [TestimonialConnectionImage]
  name: [TestimonialConnectionName]
  position: [TestimonialConnectionPosition]
  testemonial: [TestimonialConnectionTestemonial]
}

input TestimonialInput {
  image: ID
  name: String
  position: String
  testemonial: String
}

input updateBlogarticleInput {
  where: InputID
  data: editBlogarticleInput
}

type updateBlogarticlePayload {
  blogarticle: Blogarticle
}

input updateChildmenulinkInput {
  where: InputID
  data: editChildmenulinkInput
}

type updateChildmenulinkPayload {
  childmenulink: Childmenulink
}

input updateGalleryimageInput {
  where: InputID
  data: editGalleryimageInput
}

type updateGalleryimagePayload {
  galleryimage: Galleryimage
}

input updateGalleryInput {
  where: InputID
  data: editGalleryInput
}

type updateGalleryPayload {
  gallery: Gallery
}

input updateMenulinkInput {
  where: InputID
  data: editMenulinkInput
}

type updateMenulinkPayload {
  menulink: Menulink
}

input updatePageInput {
  where: InputID
  data: editPageInput
}

type updatePagePayload {
  page: Page
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTestimonialInput {
  where: InputID
  data: editTestimonialInput
}

type updateTestimonialPayload {
  testimonial: Testimonial
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
